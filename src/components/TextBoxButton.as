package components{    import fl.text.TLFTextField;    import components.parts.TextBase;    import flash.events.MouseEvent;    import flash.text.TextFieldAutoSize;    import flash.text.TextFormat;    import style.Font;    import flash.ui.Mouse;    import flash.display.Sprite;    import org.casalib.display.CasaSprite;    import components.parts.TextBase;    import org.casalib.util.DrawUtil;    import flash.geom.Point    public class TextBoxButton extends Sprite    {        /////////////////////        //// INSTANCES //////        /////////////////////        private var txtField:TLFTextField;        private var txtBase:TextBase;                /////////////////////           //// MEMBER VARS ////        /////////////////////       // private var mColdColor:Number;        private var mBoxHeight:Number;        private var mTextOverColor:Number;        private var mBoxWidth:Number;        private var mBoxHeightPadding:Number;        private var mBoxWidthPadding:Number;        private var mBoxFillColor:Number;        private var mBoxLineColor:Number;        private var mBoxHotFillColor:Number;        private var mBoxHotLineColor:Number;        private var mBoxAlpha:Number;                /////////////////////        //// STATIC VARS ////        /////////////////////        public function TextBoxButton(Params:Object)        {                       _SetDefaults(Params);            txtBase = new TextBase( Params );            this.mouseChildren = false;            mBoxHeight                  = txtBase.GetHeight() + (mBoxHeightPadding * 2);            mBoxWidth                   = txtBase.GetWidth() + (mBoxWidthPadding * 2);           // _DrawBox( { Color:mBoxFillColor, LineColor:mBoxLineColor, Alpha:mBoxAlpha } );            addChild(txtBase);                                   txtBase.x = mBoxWidthPadding;            txtBase.y = mBoxHeightPadding;                                  addEventListener(MouseEvent.MOUSE_OVER, _OverButton);            addEventListener(MouseEvent.MOUSE_OUT, _OutButton);              addEventListener(MouseEvent.CLICK, _OnClick);              super();        }        public function GetWidth():Number        {            return mBoxWidth;        }                public function GetHeight():Number        {            return mBoxHeight;        }        private function _DrawBox(Params:Object):void        {                      this.graphics.clear();            this.graphics.beginFill(Params.Color,Params.Alpha);            DrawUtil.drawShape(this.graphics, new Array(new Point(0, 0), new Point(0, mBoxHeight), new Point(mBoxWidth, mBoxHeight), new Point(mBoxWidth, 0)));            this.graphics.endFill();             }        private function _OverButton(e:MouseEvent):void        {                      Mouse.cursor = "button";           txtBase.SetFormat( { Color:mTextOverColor } );           //_DrawBox({Color:mBoxHotFillColor, LineColor:mBoxHotLineColor, Alpha:mBoxAlpha});        }                private function _OutButton(e:MouseEvent):void        {            Mouse.cursor = "auto";                                     txtBase.SetFormat( { } );           // _DrawBox({Color:mBoxFillColor, Alpha:mBoxAlpha});        }        private function _OnClick(e:MouseEvent):void        {            trace("buttonClicked");        }        private function _SetDefaults(Params:Object):void        {            mTextOverColor          = (Params.TextOverColor ==  undefined) ? Font.HOT_COLOR:Params.TextOverColor;            mBoxFillColor           = (Params.BoxFillColor ==  undefined) ? Font.FONT_BOX_COLD_COLOR:Params.BoxFillColor;            mBoxHotFillColor        = (Params.BoxHotFillColor ==  undefined) ? Font.FONT_BOX_HOT_COLOR:Params.BoxHotFillColor;                       mBoxAlpha               = (Params.BoxAlpha == undefined) ? Font.FONT_BOX_ALPHA:Params.BoxAlpha;            mBoxHeightPadding       = (Params.BoxHeightPadding == undefined) ? Font.FONT_BOX_HEIGHT_PADDING:Params.BoxHeightPadding;            mBoxWidthPadding        = (Params.BoxWidthPadding == undefined) ? Font.FONT_BOX_WIDTH_PADDING:Params.BoxWidthPadding;        }    }}